/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * API example
 * The API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/spike9/api-example/1.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ExampleDto
 */
export interface ExampleDto {
    /**
     * 
     * @type {any}
     * @memberof ExampleDto
     */
    value: any;
}
/**
 * AppApi - fetch parameter creator
 * @export
 */
export const AppApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a simple HelloWorld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a simple HelloWorld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AppApiFetchParamCreator(configuration).appControllerGetHello(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get a simple HelloWorld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any) {
            return AppApiFp(configuration).appControllerGetHello(options)(fetch, basePath);
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @summary Get a simple HelloWorld
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHello(options?: any) {
        return AppApiFp(this.configuration).appControllerGetHello(options)(this.fetch, this.basePath);
    }

}
/**
 * ExamplesApi - fetch parameter creator
 * @export
 */
export const ExamplesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST example
         * @param {ExampleDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerCreate(body: ExampleDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling exampleControllerCreate.');
            }
            const localVarPath = `/api/v1/examples`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ExampleDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DELETE example
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerDelete(key: string, options: any = {}): FetchArgs {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling exampleControllerDelete.');
            }
            const localVarPath = `/api/v1/examples/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET example
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerGet(key: string, options: any = {}): FetchArgs {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling exampleControllerGet.');
            }
            const localVarPath = `/api/v1/examples/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerList(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/examples`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PUT example
         * @param {ExampleDto} body 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerUpdate(body: ExampleDto, key: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling exampleControllerUpdate.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling exampleControllerUpdate.');
            }
            const localVarPath = `/api/v1/examples/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ExampleDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamplesApi - functional programming interface
 * @export
 */
export const ExamplesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST example
         * @param {ExampleDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerCreate(body: ExampleDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExamplesApiFetchParamCreator(configuration).exampleControllerCreate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary DELETE example
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerDelete(key: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExamplesApiFetchParamCreator(configuration).exampleControllerDelete(key, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary GET example
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerGet(key: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExamplesApiFetchParamCreator(configuration).exampleControllerGet(key, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary GET examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExamplesApiFetchParamCreator(configuration).exampleControllerList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary PUT example
         * @param {ExampleDto} body 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerUpdate(body: ExampleDto, key: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExamplesApiFetchParamCreator(configuration).exampleControllerUpdate(body, key, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ExamplesApi - factory interface
 * @export
 */
export const ExamplesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary POST example
         * @param {ExampleDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerCreate(body: ExampleDto, options?: any) {
            return ExamplesApiFp(configuration).exampleControllerCreate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary DELETE example
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerDelete(key: string, options?: any) {
            return ExamplesApiFp(configuration).exampleControllerDelete(key, options)(fetch, basePath);
        },
        /**
         * 
         * @summary GET example
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerGet(key: string, options?: any) {
            return ExamplesApiFp(configuration).exampleControllerGet(key, options)(fetch, basePath);
        },
        /**
         * 
         * @summary GET examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerList(options?: any) {
            return ExamplesApiFp(configuration).exampleControllerList(options)(fetch, basePath);
        },
        /**
         * 
         * @summary PUT example
         * @param {ExampleDto} body 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleControllerUpdate(body: ExampleDto, key: string, options?: any) {
            return ExamplesApiFp(configuration).exampleControllerUpdate(body, key, options)(fetch, basePath);
        },
    };
};

/**
 * ExamplesApi - object-oriented interface
 * @export
 * @class ExamplesApi
 * @extends {BaseAPI}
 */
export class ExamplesApi extends BaseAPI {
    /**
     * 
     * @summary POST example
     * @param {ExampleDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public exampleControllerCreate(body: ExampleDto, options?: any) {
        return ExamplesApiFp(this.configuration).exampleControllerCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary DELETE example
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public exampleControllerDelete(key: string, options?: any) {
        return ExamplesApiFp(this.configuration).exampleControllerDelete(key, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary GET example
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public exampleControllerGet(key: string, options?: any) {
        return ExamplesApiFp(this.configuration).exampleControllerGet(key, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary GET examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public exampleControllerList(options?: any) {
        return ExamplesApiFp(this.configuration).exampleControllerList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary PUT example
     * @param {ExampleDto} body 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public exampleControllerUpdate(body: ExampleDto, key: string, options?: any) {
        return ExamplesApiFp(this.configuration).exampleControllerUpdate(body, key, options)(this.fetch, this.basePath);
    }

}
